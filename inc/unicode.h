/* SPDX-License-Identifier: GPL-3.0-or-later */
/* Copyright (c) 2023 Amol Surati */
/* vim: set noet ts=4 sts=4 sw=4: */

#ifndef INC_UNICODE_H
#define INC_UNICODE_H

#include <uchar.h>
#include <assert.h>
#include <ctype.h>

#define NUM_RANGES(a)	((sizeof(a) / sizeof((a)[0])) / 2)

/*
 * These IDs are run-length encoded:
 * <start-code-point-in-hex, #-of-code-points-in-dec>
 */
static const char32_t g_xid_start[] = {
	0x41, 26,
	0x5f, 1,	/* _: Manually added */
	0x61, 26,
	0xaa, 1,
	0xb5, 1,
	0xba, 1,
	0xc0, 23,
	0xd8, 31,
	0xf8, 195,
	0x1bb, 1,
	0x1bc, 4,
	0x1c0, 4,
	0x1c4, 208,
	0x294, 1,
	0x295, 27,
	0x2b0, 18,
	0x2c6, 12,
	0x2e0, 5,
	0x2ec, 1,
	0x2ee, 1,
	0x370, 4,
	0x374, 1,
	0x376, 2,
	0x37b, 3,
	0x37f, 1,
	0x386, 1,
	0x388, 3,
	0x38c, 1,
	0x38e, 20,
	0x3a3, 83,
	0x3f7, 139,
	0x48a, 166,
	0x531, 38,
	0x559, 1,
	0x560, 41,
	0x5d0, 27,
	0x5ef, 4,
	0x620, 32,
	0x640, 1,
	0x641, 10,
	0x66e, 2,
	0x671, 99,
	0x6d5, 1,
	0x6e5, 2,
	0x6ee, 2,
	0x6fa, 3,
	0x6ff, 1,
	0x710, 1,
	0x712, 30,
	0x74d, 89,
	0x7b1, 1,
	0x7ca, 33,
	0x7f4, 2,
	0x7fa, 1,
	0x800, 22,
	0x81a, 1,
	0x824, 1,
	0x828, 1,
	0x840, 25,
	0x860, 11,
	0x870, 24,
	0x889, 6,
	0x8a0, 41,
	0x8c9, 1,
	0x904, 54,
	0x93d, 1,
	0x950, 1,
	0x958, 10,
	0x971, 1,
	0x972, 15,
	0x985, 8,
	0x98f, 2,
	0x993, 22,
	0x9aa, 7,
	0x9b2, 1,
	0x9b6, 4,
	0x9bd, 1,
	0x9ce, 1,
	0x9dc, 2,
	0x9df, 3,
	0x9f0, 2,
	0x9fc, 1,
	0xa05, 6,
	0xa0f, 2,
	0xa13, 22,
	0xa2a, 7,
	0xa32, 2,
	0xa35, 2,
	0xa38, 2,
	0xa59, 4,
	0xa5e, 1,
	0xa72, 3,
	0xa85, 9,
	0xa8f, 3,
	0xa93, 22,
	0xaaa, 7,
	0xab2, 2,
	0xab5, 5,
	0xabd, 1,
	0xad0, 1,
	0xae0, 2,
	0xaf9, 1,
	0xb05, 8,
	0xb0f, 2,
	0xb13, 22,
	0xb2a, 7,
	0xb32, 2,
	0xb35, 5,
	0xb3d, 1,
	0xb5c, 2,
	0xb5f, 3,
	0xb71, 1,
	0xb83, 1,
	0xb85, 6,
	0xb8e, 3,
	0xb92, 4,
	0xb99, 2,
	0xb9c, 1,
	0xb9e, 2,
	0xba3, 2,
	0xba8, 3,
	0xbae, 12,
	0xbd0, 1,
	0xc05, 8,
	0xc0e, 3,
	0xc12, 23,
	0xc2a, 16,
	0xc3d, 1,
	0xc58, 3,
	0xc5d, 1,
	0xc60, 2,
	0xc80, 1,
	0xc85, 8,
	0xc8e, 3,
	0xc92, 23,
	0xcaa, 10,
	0xcb5, 5,
	0xcbd, 1,
	0xcdd, 2,
	0xce0, 2,
	0xcf1, 2,
	0xd04, 9,
	0xd0e, 3,
	0xd12, 41,
	0xd3d, 1,
	0xd4e, 1,
	0xd54, 3,
	0xd5f, 3,
	0xd7a, 6,
	0xd85, 18,
	0xd9a, 24,
	0xdb3, 9,
	0xdbd, 1,
	0xdc0, 7,
	0xe01, 48,
	0xe32, 1,
	0xe40, 6,
	0xe46, 1,
	0xe81, 2,
	0xe84, 1,
	0xe86, 5,
	0xe8c, 24,
	0xea5, 1,
	0xea7, 10,
	0xeb2, 1,
	0xebd, 1,
	0xec0, 5,
	0xec6, 1,
	0xedc, 4,
	0xf00, 1,
	0xf40, 8,
	0xf49, 36,
	0xf88, 5,
	0x1000, 43,
	0x103f, 1,
	0x1050, 6,
	0x105a, 4,
	0x1061, 1,
	0x1065, 2,
	0x106e, 3,
	0x1075, 13,
	0x108e, 1,
	0x10a0, 38,
	0x10c7, 1,
	0x10cd, 1,
	0x10d0, 43,
	0x10fc, 1,
	0x10fd, 3,
	0x1100, 329,
	0x124a, 4,
	0x1250, 7,
	0x1258, 1,
	0x125a, 4,
	0x1260, 41,
	0x128a, 4,
	0x1290, 33,
	0x12b2, 4,
	0x12b8, 7,
	0x12c0, 1,
	0x12c2, 4,
	0x12c8, 15,
	0x12d8, 57,
	0x1312, 4,
	0x1318, 67,
	0x1380, 16,
	0x13a0, 86,
	0x13f8, 6,
	0x1401, 620,
	0x166f, 17,
	0x1681, 26,
	0x16a0, 75,
	0x16ee, 3,
	0x16f1, 8,
	0x1700, 18,
	0x171f, 19,
	0x1740, 18,
	0x1760, 13,
	0x176e, 3,
	0x1780, 52,
	0x17d7, 1,
	0x17dc, 1,
	0x1820, 35,
	0x1843, 1,
	0x1844, 53,
	0x1880, 5,
	0x1885, 2,
	0x1887, 34,
	0x18aa, 1,
	0x18b0, 70,
	0x1900, 31,
	0x1950, 30,
	0x1970, 5,
	0x1980, 44,
	0x19b0, 26,
	0x1a00, 23,
	0x1a20, 53,
	0x1aa7, 1,
	0x1b05, 47,
	0x1b45, 8,
	0x1b83, 30,
	0x1bae, 2,
	0x1bba, 44,
	0x1c00, 36,
	0x1c4d, 3,
	0x1c5a, 30,
	0x1c78, 6,
	0x1c80, 9,
	0x1c90, 43,
	0x1cbd, 3,
	0x1ce9, 4,
	0x1cee, 6,
	0x1cf5, 2,
	0x1cfa, 1,
	0x1d00, 44,
	0x1d2c, 63,
	0x1d6b, 13,
	0x1d78, 1,
	0x1d79, 34,
	0x1d9b, 37,
	0x1e00, 278,
	0x1f18, 6,
	0x1f20, 38,
	0x1f48, 6,
	0x1f50, 8,
	0x1f59, 1,
	0x1f5b, 1,
	0x1f5d, 1,
	0x1f5f, 31,
	0x1f80, 53,
	0x1fb6, 7,
	0x1fbe, 1,
	0x1fc2, 3,
	0x1fc6, 7,
	0x1fd0, 4,
	0x1fd6, 6,
	0x1fe0, 13,
	0x1ff2, 3,
	0x1ff6, 7,
	0x2071, 1,
	0x207f, 1,
	0x2090, 13,
	0x2102, 1,
	0x2107, 1,
	0x210a, 10,
	0x2115, 1,
	0x2118, 1,
	0x2119, 5,
	0x2124, 1,
	0x2126, 1,
	0x2128, 1,
	0x212a, 4,
	0x212e, 1,
	0x212f, 6,
	0x2135, 4,
	0x2139, 1,
	0x213c, 4,
	0x2145, 5,
	0x214e, 1,
	0x2160, 35,
	0x2183, 2,
	0x2185, 4,
	0x2c00, 124,
	0x2c7c, 2,
	0x2c7e, 103,
	0x2ceb, 4,
	0x2cf2, 2,
	0x2d00, 38,
	0x2d27, 1,
	0x2d2d, 1,
	0x2d30, 56,
	0x2d6f, 1,
	0x2d80, 23,
	0x2da0, 7,
	0x2da8, 7,
	0x2db0, 7,
	0x2db8, 7,
	0x2dc0, 7,
	0x2dc8, 7,
	0x2dd0, 7,
	0x2dd8, 7,
	0x3005, 1,
	0x3006, 1,
	0x3007, 1,
	0x3021, 9,
	0x3031, 5,
	0x3038, 3,
	0x303b, 1,
	0x303c, 1,
	0x3041, 86,
	0x309d, 2,
	0x309f, 1,
	0x30a1, 90,
	0x30fc, 3,
	0x30ff, 1,
	0x3105, 43,
	0x3131, 94,
	0x31a0, 32,
	0x31f0, 16,
	0x3400, 6592,
	0x4e00, 21013,
	0xa015, 1,
	0xa016, 1143,
	0xa4d0, 40,
	0xa4f8, 6,
	0xa500, 268,
	0xa60c, 1,
	0xa610, 16,
	0xa62a, 2,
	0xa640, 46,
	0xa66e, 1,
	0xa67f, 1,
	0xa680, 28,
	0xa69c, 2,
	0xa6a0, 70,
	0xa6e6, 10,
	0xa717, 9,
	0xa722, 78,
	0xa770, 1,
	0xa771, 23,
	0xa788, 1,
	0xa78b, 4,
	0xa78f, 1,
	0xa790, 59,
	0xa7d0, 2,
	0xa7d3, 1,
	0xa7d5, 5,
	0xa7f2, 3,
	0xa7f5, 2,
	0xa7f7, 1,
	0xa7f8, 2,
	0xa7fa, 1,
	0xa7fb, 7,
	0xa803, 3,
	0xa807, 4,
	0xa80c, 23,
	0xa840, 52,
	0xa882, 50,
	0xa8f2, 6,
	0xa8fb, 1,
	0xa8fd, 2,
	0xa90a, 28,
	0xa930, 23,
	0xa960, 29,
	0xa984, 47,
	0xa9cf, 1,
	0xa9e0, 5,
	0xa9e6, 1,
	0xa9e7, 9,
	0xa9fa, 5,
	0xaa00, 41,
	0xaa40, 3,
	0xaa44, 8,
	0xaa60, 16,
	0xaa70, 1,
	0xaa71, 6,
	0xaa7a, 1,
	0xaa7e, 50,
	0xaab1, 1,
	0xaab5, 2,
	0xaab9, 5,
	0xaac0, 1,
	0xaac2, 1,
	0xaadb, 2,
	0xaadd, 1,
	0xaae0, 11,
	0xaaf2, 1,
	0xaaf3, 2,
	0xab01, 6,
	0xab09, 6,
	0xab11, 6,
	0xab20, 7,
	0xab28, 7,
	0xab30, 43,
	0xab5c, 4,
	0xab60, 9,
	0xab69, 1,
	0xab70, 80,
	0xabc0, 35,
	0xac00, 11172,
	0xd7b0, 23,
	0xd7cb, 49,
	0xf900, 366,
	0xfa70, 106,
	0xfb00, 7,
	0xfb13, 5,
	0xfb1d, 1,
	0xfb1f, 10,
	0xfb2a, 13,
	0xfb38, 5,
	0xfb3e, 1,
	0xfb40, 2,
	0xfb43, 2,
	0xfb46, 108,
	0xfbd3, 139,
	0xfc64, 218,
	0xfd50, 64,
	0xfd92, 54,
	0xfdf0, 10,
	0xfe71, 1,
	0xfe73, 1,
	0xfe77, 1,
	0xfe79, 1,
	0xfe7b, 1,
	0xfe7d, 1,
	0xfe7f, 126,
	0xff21, 26,
	0xff41, 26,
	0xff66, 10,
	0xff70, 1,
	0xff71, 45,
	0xffa0, 31,
	0xffc2, 6,
	0xffca, 6,
	0xffd2, 6,
	0xffda, 3,
	0x10000, 12,
	0x1000d, 26,
	0x10028, 19,
	0x1003c, 2,
	0x1003f, 15,
	0x10050, 14,
	0x10080, 123,
	0x10140, 53,
	0x10280, 29,
	0x102a0, 49,
	0x10300, 32,
	0x1032d, 20,
	0x10341, 1,
	0x10342, 8,
	0x1034a, 1,
	0x10350, 38,
	0x10380, 30,
	0x103a0, 36,
	0x103c8, 8,
	0x103d1, 5,
	0x10400, 80,
	0x10450, 78,
	0x104b0, 36,
	0x104d8, 36,
	0x10500, 40,
	0x10530, 52,
	0x10570, 11,
	0x1057c, 15,
	0x1058c, 7,
	0x10594, 2,
	0x10597, 11,
	0x105a3, 15,
	0x105b3, 7,
	0x105bb, 2,
	0x10600, 311,
	0x10740, 22,
	0x10760, 8,
	0x10780, 6,
	0x10787, 42,
	0x107b2, 9,
	0x10800, 6,
	0x10808, 1,
	0x1080a, 44,
	0x10837, 2,
	0x1083c, 1,
	0x1083f, 23,
	0x10860, 23,
	0x10880, 31,
	0x108e0, 19,
	0x108f4, 2,
	0x10900, 22,
	0x10920, 26,
	0x10980, 56,
	0x109be, 2,
	0x10a00, 1,
	0x10a10, 4,
	0x10a15, 3,
	0x10a19, 29,
	0x10a60, 29,
	0x10a80, 29,
	0x10ac0, 8,
	0x10ac9, 28,
	0x10b00, 54,
	0x10b40, 22,
	0x10b60, 19,
	0x10b80, 18,
	0x10c00, 73,
	0x10c80, 51,
	0x10cc0, 51,
	0x10d00, 36,
	0x10e80, 42,
	0x10eb0, 2,
	0x10f00, 29,
	0x10f27, 1,
	0x10f30, 22,
	0x10f70, 18,
	0x10fb0, 21,
	0x10fe0, 23,
	0x11003, 53,
	0x11071, 2,
	0x11075, 1,
	0x11083, 45,
	0x110d0, 25,
	0x11103, 36,
	0x11144, 1,
	0x11147, 1,
	0x11150, 35,
	0x11176, 1,
	0x11183, 48,
	0x111c1, 4,
	0x111da, 1,
	0x111dc, 1,
	0x11200, 18,
	0x11213, 25,
	0x1123f, 2,
	0x11280, 7,
	0x11288, 1,
	0x1128a, 4,
	0x1128f, 15,
	0x1129f, 10,
	0x112b0, 47,
	0x11305, 8,
	0x1130f, 2,
	0x11313, 22,
	0x1132a, 7,
	0x11332, 2,
	0x11335, 5,
	0x1133d, 1,
	0x11350, 1,
	0x1135d, 5,
	0x11400, 53,
	0x11447, 4,
	0x1145f, 3,
	0x11480, 48,
	0x114c4, 2,
	0x114c7, 1,
	0x11580, 47,
	0x115d8, 4,
	0x11600, 48,
	0x11644, 1,
	0x11680, 43,
	0x116b8, 1,
	0x11700, 27,
	0x11740, 7,
	0x11800, 44,
	0x118a0, 64,
	0x118ff, 8,
	0x11909, 1,
	0x1190c, 8,
	0x11915, 2,
	0x11918, 24,
	0x1193f, 1,
	0x11941, 1,
	0x119a0, 8,
	0x119aa, 39,
	0x119e1, 1,
	0x119e3, 1,
	0x11a00, 1,
	0x11a0b, 40,
	0x11a3a, 1,
	0x11a50, 1,
	0x11a5c, 46,
	0x11a9d, 1,
	0x11ab0, 73,
	0x11c00, 9,
	0x11c0a, 37,
	0x11c40, 1,
	0x11c72, 30,
	0x11d00, 7,
	0x11d08, 2,
	0x11d0b, 38,
	0x11d46, 1,
	0x11d60, 6,
	0x11d67, 2,
	0x11d6a, 32,
	0x11d98, 1,
	0x11ee0, 19,
	0x11f02, 1,
	0x11f04, 13,
	0x11f12, 34,
	0x11fb0, 1,
	0x12000, 922,
	0x12400, 111,
	0x12480, 196,
	0x12f90, 97,
	0x13000, 1072,
	0x13441, 6,
	0x14400, 583,
	0x16800, 569,
	0x16a40, 31,
	0x16a70, 79,
	0x16ad0, 30,
	0x16b00, 48,
	0x16b40, 4,
	0x16b63, 21,
	0x16b7d, 19,
	0x16e40, 64,
	0x16f00, 75,
	0x16f50, 1,
	0x16f93, 13,
	0x16fe0, 2,
	0x16fe3, 1,
	0x17000, 6136,
	0x18800, 1238,
	0x18d00, 9,
	0x1aff0, 4,
	0x1aff5, 7,
	0x1affd, 2,
	0x1b000, 291,
	0x1b132, 1,
	0x1b150, 3,
	0x1b155, 1,
	0x1b164, 4,
	0x1b170, 396,
	0x1bc00, 107,
	0x1bc70, 13,
	0x1bc80, 9,
	0x1bc90, 10,
	0x1d400, 85,
	0x1d456, 71,
	0x1d49e, 2,
	0x1d4a2, 1,
	0x1d4a5, 2,
	0x1d4a9, 4,
	0x1d4ae, 12,
	0x1d4bb, 1,
	0x1d4bd, 7,
	0x1d4c5, 65,
	0x1d507, 4,
	0x1d50d, 8,
	0x1d516, 7,
	0x1d51e, 28,
	0x1d53b, 4,
	0x1d540, 5,
	0x1d546, 1,
	0x1d54a, 7,
	0x1d552, 340,
	0x1d6a8, 25,
	0x1d6c2, 25,
	0x1d6dc, 31,
	0x1d6fc, 25,
	0x1d716, 31,
	0x1d736, 25,
	0x1d750, 31,
	0x1d770, 25,
	0x1d78a, 31,
	0x1d7aa, 25,
	0x1d7c4, 8,
	0x1df00, 10,
	0x1df0a, 1,
	0x1df0b, 20,
	0x1df25, 6,
	0x1e030, 62,
	0x1e100, 45,
	0x1e137, 7,
	0x1e14e, 1,
	0x1e290, 30,
	0x1e2c0, 44,
	0x1e4d0, 27,
	0x1e4eb, 1,
	0x1e7e0, 7,
	0x1e7e8, 4,
	0x1e7ed, 2,
	0x1e7f0, 15,
	0x1e800, 197,
	0x1e900, 68,
	0x1e94b, 1,
	0x1ee00, 4,
	0x1ee05, 27,
	0x1ee21, 2,
	0x1ee24, 1,
	0x1ee27, 1,
	0x1ee29, 10,
	0x1ee34, 4,
	0x1ee39, 1,
	0x1ee3b, 1,
	0x1ee42, 1,
	0x1ee47, 1,
	0x1ee49, 1,
	0x1ee4b, 1,
	0x1ee4d, 3,
	0x1ee51, 2,
	0x1ee54, 1,
	0x1ee57, 1,
	0x1ee59, 1,
	0x1ee5b, 1,
	0x1ee5d, 1,
	0x1ee5f, 1,
	0x1ee61, 2,
	0x1ee64, 1,
	0x1ee67, 4,
	0x1ee6c, 7,
	0x1ee74, 4,
	0x1ee79, 4,
	0x1ee7e, 1,
	0x1ee80, 10,
	0x1ee8b, 17,
	0x1eea1, 3,
	0x1eea5, 5,
	0x1eeab, 17,
	0x20000, 42720,
	0x2a700, 4154,
	0x2b740, 222,
	0x2b820, 5762,
	0x2ceb0, 7473,
	0x2f800, 542,
	0x30000, 4939,
	0x31350, 4192,
};

static const char32_t g_xid_continue[] = {
	0x30, 10,
	/* 0x5f, 1, */	/* Manually removed; it is added in g_xid_start */
	0xb7, 1,
	0x300, 112,
	0x387, 1,
	0x483, 5,
	0x591, 45,
	0x5bf, 1,
	0x5c1, 2,
	0x5c4, 2,
	0x5c7, 1,
	0x610, 11,
	0x64b, 31,
	0x670, 1,
	0x6d6, 7,
	0x6df, 6,
	0x6e7, 2,
	0x6ea, 4,
	0x6f0, 10,
	0x711, 1,
	0x730, 27,
	0x7a6, 11,
	0x7c0, 10,
	0x7eb, 9,
	0x7fd, 1,
	0x816, 4,
	0x81b, 9,
	0x825, 3,
	0x829, 5,
	0x859, 3,
	0x898, 8,
	0x8ca, 24,
	0x8e3, 33,
	0x93a, 3,
	0x93e, 18,
	0x951, 7,
	0x962, 2,
	0x966, 10,
	0x981, 3,
	0x9bc, 1,
	0x9be, 7,
	0x9c7, 2,
	0x9cb, 3,
	0x9d7, 1,
	0x9e2, 2,
	0x9e6, 10,
	0x9fe, 1,
	0xa01, 3,
	0xa3c, 1,
	0xa3e, 5,
	0xa47, 2,
	0xa4b, 3,
	0xa51, 1,
	0xa66, 12,
	0xa75, 1,
	0xa81, 3,
	0xabc, 1,
	0xabe, 8,
	0xac7, 3,
	0xacb, 3,
	0xae2, 2,
	0xae6, 10,
	0xafa, 6,
	0xb01, 3,
	0xb3c, 1,
	0xb3e, 7,
	0xb47, 2,
	0xb4b, 3,
	0xb55, 3,
	0xb62, 2,
	0xb66, 10,
	0xb82, 1,
	0xbbe, 5,
	0xbc6, 3,
	0xbca, 4,
	0xbd7, 1,
	0xbe6, 10,
	0xc00, 5,
	0xc3c, 1,
	0xc3e, 7,
	0xc46, 3,
	0xc4a, 4,
	0xc55, 2,
	0xc62, 2,
	0xc66, 10,
	0xc81, 3,
	0xcbc, 1,
	0xcbe, 7,
	0xcc6, 3,
	0xcca, 4,
	0xcd5, 2,
	0xce2, 2,
	0xce6, 10,
	0xcf3, 1,
	0xd00, 4,
	0xd3b, 2,
	0xd3e, 7,
	0xd46, 3,
	0xd4a, 4,
	0xd57, 1,
	0xd62, 2,
	0xd66, 10,
	0xd81, 3,
	0xdca, 1,
	0xdcf, 6,
	0xdd6, 1,
	0xdd8, 8,
	0xde6, 10,
	0xdf2, 2,
	0xe31, 1,
	0xe33, 8,
	0xe47, 8,
	0xe50, 10,
	0xeb1, 1,
	0xeb3, 10,
	0xec8, 7,
	0xed0, 10,
	0xf18, 2,
	0xf20, 10,
	0xf35, 1,
	0xf37, 1,
	0xf39, 1,
	0xf3e, 2,
	0xf71, 20,
	0xf86, 2,
	0xf8d, 11,
	0xf99, 36,
	0xfc6, 1,
	0x102b, 20,
	0x1040, 10,
	0x1056, 4,
	0x105e, 3,
	0x1062, 3,
	0x1067, 7,
	0x1071, 4,
	0x1082, 12,
	0x108f, 15,
	0x135d, 3,
	0x1369, 9,
	0x1712, 4,
	0x1732, 3,
	0x1752, 2,
	0x1772, 2,
	0x17b4, 32,
	0x17dd, 1,
	0x17e0, 10,
	0x180b, 3,
	0x180f, 11,
	0x18a9, 1,
	0x1920, 12,
	0x1930, 12,
	0x1946, 10,
	0x19d0, 11,
	0x1a17, 5,
	0x1a55, 10,
	0x1a60, 29,
	0x1a7f, 11,
	0x1a90, 10,
	0x1ab0, 14,
	0x1abf, 16,
	0x1b00, 5,
	0x1b34, 17,
	0x1b50, 10,
	0x1b6b, 9,
	0x1b80, 3,
	0x1ba1, 13,
	0x1bb0, 10,
	0x1be6, 14,
	0x1c24, 20,
	0x1c40, 10,
	0x1c50, 10,
	0x1cd0, 3,
	0x1cd4, 21,
	0x1ced, 1,
	0x1cf4, 1,
	0x1cf7, 3,
	0x1dc0, 64,
	0x203f, 2,
	0x2054, 1,
	0x20d0, 13,
	0x20e1, 1,
	0x20e5, 12,
	0x2cef, 3,
	0x2d7f, 1,
	0x2de0, 32,
	0x302a, 6,
	0x3099, 2,
	0xa620, 10,
	0xa66f, 1,
	0xa674, 10,
	0xa69e, 2,
	0xa6f0, 2,
	0xa802, 1,
	0xa806, 1,
	0xa80b, 1,
	0xa823, 5,
	0xa82c, 1,
	0xa880, 2,
	0xa8b4, 18,
	0xa8d0, 10,
	0xa8e0, 18,
	0xa8ff, 11,
	0xa926, 8,
	0xa947, 13,
	0xa980, 4,
	0xa9b3, 14,
	0xa9d0, 10,
	0xa9e5, 1,
	0xa9f0, 10,
	0xaa29, 14,
	0xaa43, 1,
	0xaa4c, 2,
	0xaa50, 10,
	0xaa7b, 3,
	0xaab0, 1,
	0xaab2, 3,
	0xaab7, 2,
	0xaabe, 2,
	0xaac1, 1,
	0xaaeb, 5,
	0xaaf5, 2,
	0xabe3, 8,
	0xabec, 2,
	0xabf0, 10,
	0xfb1e, 1,
	0xfe00, 16,
	0xfe20, 16,
	0xfe33, 2,
	0xfe4d, 3,
	0xff10, 10,
	0xff3f, 1,
	0xff9e, 2,
	0x101fd, 1,
	0x102e0, 1,
	0x10376, 5,
	0x104a0, 10,
	0x10a01, 3,
	0x10a05, 2,
	0x10a0c, 4,
	0x10a38, 3,
	0x10a3f, 1,
	0x10ae5, 2,
	0x10d24, 4,
	0x10d30, 10,
	0x10eab, 2,
	0x10efd, 3,
	0x10f46, 11,
	0x10f82, 4,
	0x11000, 3,
	0x11038, 15,
	0x11066, 11,
	0x11073, 2,
	0x1107f, 4,
	0x110b0, 11,
	0x110c2, 1,
	0x110f0, 10,
	0x11100, 3,
	0x11127, 14,
	0x11136, 10,
	0x11145, 2,
	0x11173, 1,
	0x11180, 3,
	0x111b3, 14,
	0x111c9, 4,
	0x111ce, 12,
	0x1122c, 12,
	0x1123e, 1,
	0x11241, 1,
	0x112df, 12,
	0x112f0, 10,
	0x11300, 4,
	0x1133b, 2,
	0x1133e, 7,
	0x11347, 2,
	0x1134b, 3,
	0x11357, 1,
	0x11362, 2,
	0x11366, 7,
	0x11370, 5,
	0x11435, 18,
	0x11450, 10,
	0x1145e, 1,
	0x114b0, 20,
	0x114d0, 10,
	0x115af, 7,
	0x115b8, 9,
	0x115dc, 2,
	0x11630, 17,
	0x11650, 10,
	0x116ab, 13,
	0x116c0, 10,
	0x1171d, 15,
	0x11730, 10,
	0x1182c, 15,
	0x118e0, 10,
	0x11930, 6,
	0x11937, 2,
	0x1193b, 4,
	0x11940, 1,
	0x11942, 2,
	0x11950, 10,
	0x119d1, 7,
	0x119da, 7,
	0x119e4, 1,
	0x11a01, 10,
	0x11a33, 7,
	0x11a3b, 4,
	0x11a47, 1,
	0x11a51, 11,
	0x11a8a, 16,
	0x11c2f, 8,
	0x11c38, 8,
	0x11c50, 10,
	0x11c92, 22,
	0x11ca9, 14,
	0x11d31, 6,
	0x11d3a, 1,
	0x11d3c, 2,
	0x11d3f, 7,
	0x11d47, 1,
	0x11d50, 10,
	0x11d8a, 5,
	0x11d90, 2,
	0x11d93, 5,
	0x11da0, 10,
	0x11ef3, 4,
	0x11f00, 2,
	0x11f03, 1,
	0x11f34, 7,
	0x11f3e, 5,
	0x11f50, 10,
	0x13440, 1,
	0x13447, 15,
	0x16a60, 10,
	0x16ac0, 10,
	0x16af0, 5,
	0x16b30, 7,
	0x16b50, 10,
	0x16f4f, 1,
	0x16f51, 55,
	0x16f8f, 4,
	0x16fe4, 1,
	0x16ff0, 2,
	0x1bc9d, 2,
	0x1cf00, 46,
	0x1cf30, 23,
	0x1d165, 5,
	0x1d16d, 6,
	0x1d17b, 8,
	0x1d185, 7,
	0x1d1aa, 4,
	0x1d242, 3,
	0x1d7ce, 50,
	0x1da00, 55,
	0x1da3b, 50,
	0x1da75, 1,
	0x1da84, 1,
	0x1da9b, 5,
	0x1daa1, 15,
	0x1e000, 7,
	0x1e008, 17,
	0x1e01b, 7,
	0x1e023, 2,
	0x1e026, 5,
	0x1e08f, 1,
	0x1e130, 7,
	0x1e140, 10,
	0x1e2ae, 1,
	0x1e2ec, 14,
	0x1e4ec, 14,
	0x1e8d0, 7,
	0x1e944, 7,
	0x1e950, 10,
	0x1fbf0, 10,
	0xe0100, 240,
};
/*****************************************************************************/
static inline
bool is_high_surrogate(const char16_t cu)
{
	return cu >= 0xd800 && cu < 0xdc00;
}

static inline
bool is_low_surrogate(const char16_t cu)
{
	return cu >= 0xdc00 && cu < 0xe000;
}

static inline
bool is_in(const char32_t *ranges,
		   const size_t num_ranges,
		   const char32_t cp)
{
	size_t m = num_ranges / 2;
	char32_t begin = ranges[m * 2];
	char32_t end = begin + ranges[m * 2 + 1];

	if (begin <= cp && cp < end)
		return true;

	/* [0, m - 1] */
	if (cp < begin && m >= 1)
		return is_in(ranges, m, cp);

	/* [m + 1, num_ranges - 1] */
	if (cp >= end && m + 1 < num_ranges)
		return is_in(&ranges[m * 2 + 2], num_ranges - m - 1, cp);
	return false;
}

static inline
bool is_white_space(const char32_t cp)
{
	return (cp == '\t' || cp == '\v' || cp == '\f' || cp == ' ' ||
			cp == '\r' || cp == '\n');
}

static inline
bool is_xid_start(const char32_t cp)
{
	return is_in(g_xid_start, NUM_RANGES(g_xid_start), cp);
}

static inline
bool is_xid_continue(const char32_t cp)
{
	/* XID_Start is a proper subset of XID_Continue; */
	if (is_xid_start(cp))
		return true;
	return is_in(g_xid_continue, NUM_RANGES(g_xid_continue), cp);
}

static inline
bool is_a_z(const char32_t cp)
{
	return cp >= 'a' && cp <= 'z';
}

static inline
bool is_A_Z(const char32_t cp)
{
	return cp >= 'A' && cp <= 'Z';
}

static inline
bool is_hex_digit(const char32_t cp)
{
	return ((cp >= '0' && cp <= '9') ||
			(cp >= 'a' && cp <= 'f') ||
			(cp >= 'A' && cp <= 'F'));
}

static inline
bool is_dec_digit(const char32_t cp)
{
	return cp >= '0' && cp <= '9';
}

static inline
bool is_oct_digit(const char32_t cp)
{
	return cp >= '0' && cp <= '7';
}

static inline
bool is_bin_digit(const char32_t cp)
{
	return cp == '0' || cp == '1';
}

static inline
int dec_digit_value(const char32_t cp)
{
	return cp - '0';
}

static inline
int oct_digit_value(const char32_t cp)
{
	return cp - '0';
}

static inline
int bin_digit_value(const char32_t cp)
{
	return cp - '0';
}

static inline
int hex_digit_value(const char32_t cp)
{
	if (isdigit(cp))
		return cp - '0';
	else if (isupper(cp))
		return 10 + (cp - 'A');
	else
		return 10 + (cp - 'a');
}
#endif
